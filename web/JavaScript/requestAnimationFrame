# window.requestAnimationFrame()

一个用于在浏览器中执行动画的 JavaScript 方法。它告诉浏览器你希望执行一个动画，并请求浏览器在下次重绘之前调用指定的回调函数来更新动画。这个方法通常用于**实现平滑、高效的动画效果**



## 定义和停止动画

```javascript
// 定义动画
let requestID = window.requestAnimationFrame(callback);

// 停止动画
setTimeout(() => {
    window.cancelAnimationFrame(requestID);
}, 5000); // 5秒后停止动画
```

- **callback**: 一个回调函数，浏览器会在下一次重绘之前调用这个函数

  回调函数会接收一个参数 `timestamp`，表示 `requestAnimationFrame()` 被调用的时间戳（以毫秒为单位）

  `timestamp` 表示从==**页面加载开始到当前帧的时间**==（以毫秒为单位），如果页面已经加载了 10 秒，那么第一次调用 `animate` 时，`timestamp` 的值可能是 `10000`，故而建议引入**重置机制**

- **requestID**: 返回一个唯一的 ID，可以用于取消动画帧请求



## 使用

```javascript
function animate(timestamp) {
    // 在这里更新动画状态
    console.log(timestamp);

    // 继续请求下一帧
    requestAnimationFrame(animate);
}

// 启动动画
requestAnimationFrame(animate);
```

引入重置时间

```typescript
let startTime: number // 动画起始时间

const animate = (timestamp: number) => {
    if (!startTime) {
        startTime = timestamp
    }
    const progress = timestamp - startTime
    // 在这里更新动画状态
    console.log(progress)

    // 1s 内持续执行动画（大约20ms更新一次）
    if (progress < 1000) {
        // 继续请求下一帧
        window.requestAnimationFrame(animate)
    }
}
// 启动动画
window.requestAnimationFrame(animate)
```



## 封装使用函数

```typescript
/**
 * 封装动画方法
 * @param { Function } callback 每一帧执行的回调函数，接收 progress 和 elapsedTime 作为参数
 * - progress 为当前动画的进度，取值范围从 0 到 1
 * - elapsedTime 为当前动画已经执行的时间，单位为毫秒
 * @param { number } duration 动画总时长，单位为毫秒，默认为 1000ms
 * @param { number } interval 动画每一帧执行的间隔时间，单位为毫秒，默认为一帧的时间，建议不小于16.67ms（即 60Hz 的一帧时间）
 * @returns { Object } 包含 start 和 stop 方法的对象
 */
const createAnimation = (callback: (progress: number, elapsedTime: number) => void, duration = 1000, interval = 0) => {
    let startTime: number |null = null     // 动画起始时间
    let lastFrameTime: number | null       // 上一帧的时间
    let requestID: number | null           // reques进度tAnimationFrame 的 ID

    const animate = (timestamp: number) => {
        if (startTime === null) {
            startTime = timestamp
            lastFrameTime = timestamp
        }

        // 计算经过的时间
        const elapsedTime = timestamp - startTime
        // 计算动画进度（0 到 1 之间）
        const progress = Math.min(Math.max(elapsedTime / duration, 0), 1)

        if (timestamp - lastFrameTime! > interval || progress === 1) {
            // 更新上一帧时间
            lastFrameTime = timestamp
            // 执行回调函数，更新动画状态
            callback(progress, elapsedTime)
        }

        // 1s 内持续执行动画（大约20ms更新一次）
        if (progress < 1) {
            // 继续请求下一帧
            requestID = window.requestAnimationFrame(animate)
        } else {
            requestID = null
            startTime = null
            lastFrameTime = null
        }
    }

    return {
        start: () => {
            // 开始动画
            requestID = window.requestAnimationFrame(animate)
        },
        stop: () => {
            // 停止动画
            requestID && window.cancelAnimationFrame(requestID)
            requestID = null
            startTime = null
            lastFrameTime = null
        },
    }
}

export default createAnimation

```

调用函数

```typescript
const annimition = createAnimation((process, elapsedTime) => {
    // 50ms 执行一次
    console.log("annimition", process, elapsedTime)
}, 1000, 50)
annimition.start()
```

